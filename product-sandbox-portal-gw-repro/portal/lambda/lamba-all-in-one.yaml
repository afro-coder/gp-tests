apiVersion: portal.gloo.solo.io/v1beta1
kind: Group
metadata:
  name: developers
  namespace: gloo-portal
spec:
  displayName: developers
  # AccessLevel determines the resources the group has access to,
  # including APIProducts and Portals.
  accessLevel:
    apis:
    - products:
        namespaces:
        - "*"
        labels:
        - key: app
          operator: In
          values:
          - lambda
      environments:
        namespaces:
        - "*"
      usagePlans:
      - basic
    portals:
    - name: lambda-portal
      namespace: default
  userSelector:
    matchLabels:
      groups.portal.gloo.solo.io/gloo-portal.developers: "true"
---
apiVersion: portal.gloo.solo.io/v1beta1
kind: User
metadata:
  name: dev1
  namespace: gloo-portal
  labels: {
    groups.portal.gloo.solo.io/gloo-portal.developers: "true"
  }
spec:
  accessLevel: {}
  basicAuth:
    passwordSecretKey: password
    passwordSecretName: dev1-password
    passwordSecretNamespace: gloo-portal
  username: dev1
---
apiVersion: v1
kind: Secret
data: # decoded password is Pa$$w0rd
  password: JDJhJDEwJFI0RGQwNE1TUTlDSnptOFZYQy5IVE9janBJenplSXRwaW1NVFgxL2p1bWJZSHpXcnNpQ29h
metadata:
  name: dev1-password
  namespace: gloo-portal
type: opaque
---
apiVersion: portal.gloo.solo.io/v1beta1
kind: APIDoc
metadata:
  name: lambda-schema
  namespace: default
spec:
  ## specify the type of schema provided in this APIDoc.
  ## openApi is only option at this time.
  openApi:
    content:
      inlineString: |
        openapi: 3.0.1
        info:
          title: AWS-Lambda-Example
          description: Example API for testing AWS Lambda
          contact:
            email: test@email.com
          version: draft
        servers:
          - url: https://www.example.com/aws-lambda
        security:
          - AWSGatewayApiKey:
              - ''
        paths:
          /iact/say-hello:
            get:
              operationId: sayHello
              responses:
                default:
                  description: default response
                  content:
                    application/json:
                      schema:
                        type: string
          /iact/ta-types:
            get:
              operationId: taTypes
              responses:
                default:
                  description: default response
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          type: string
                          enum:
                            - VISA
                            - GES
                            - EBADGE
                            - CIV
                            - K90
                            - ESTA
          /iact/visa-types:
            get:
              operationId: visaTypes
              responses:
                default:
                  description: default response
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          type: string
                          enum:
                            - IV
                            - NIV
        components:
          securitySchemes:
            AWSGatewayApiKey:
              type: apiKey
              name: x-api-key
              in: header
---
apiVersion: portal.gloo.solo.io/v1beta1
kind: APIProduct
metadata:
  name: lambda-product
  namespace: default
  labels:
    app: lambda
spec:
  displayInfo:
    description: Lambda Product
    title: Lambda Product
  # Specify one or more version objects that will each include a list
  # of APIs that compose the version and routing for the version  
  versions:
  - name: v1
    apis:
    # Specify the API Doc(s) that will be included in the Product
    # each specifier can include a list of individual operations
    # to import from the API Doc.
    #
    # If none are listed, all the 
    # operations will be imported from the doc. 
    - apiDoc:
        name: lambda-schema
        namespace: default
    # Each imported operation must have a 'route' associated with it.
    # Here we define a route that will be used by default for all the selected APIProduct version operations.
    # You can also set overrides for this route on each individual operation.
    # A route must be provided for every Operation to enable routing for an API Product.  
    gatewayConfig:
      route:
        inlineRoute:
          backends:
          - upstream:
              # name: default-petstore-8080
              # namespace: gloo-system
              name: aws-lambda
              namespace: default
          options:
            headerManipulation:
              requestHeadersToAdd:
              - append: false
                header:
                  key: x-ben
                  value: bar
            retries:
              numRetries: 2
              retryOn: 5xx
            timeout: 60s
    # You can add arbitrary tags to an APIProduct version. 
    # Users will be able to search for APIs based on the available tags when they log into a portal application.
    tags:
      stable: {}
---
apiVersion: portal.gloo.solo.io/v1beta1
kind: Environment
metadata:
  name: dev
  namespace: default
spec:
  domains:
  # If you are using Gloo Edge and the Gateway is listening on a port other than 80, 
  # you need to include a domain in this format: <DOMAIN>:<PORT>.
  - api.petstore.ge-single.awscloud.solo.io
  displayInfo:
    description: This environment is meant for developers to deploy and test APIs.
    displayName: Development
  parameters:
    usagePlans:
      basic:
        displayName: Basic plan with API key auth
        authPolicy:
          apiKey: { }
        rateLimit:
          requestsPerUnit: 5
          unit: MINUTE
  # This field will determine which APIProduct versions are published in this Environment.
  # Each entry represents a selector which contains criteria to match the desired API product versions.
  # Here we use a single selector that will match all APIProducts with the 'app: lambda' label in all namespaces;
  # Additionally, we want to select only version of these APIProducts that contain the 'stable' tag.
  apiProducts:
  - namespaces:
    - "*" 
    labels:
    - key: app
      operator: Equals
      values:
      - lambda
    versions:
      tags:
      - stable
    usagePlans:
    - basic
---
apiVersion: portal.gloo.solo.io/v1beta1
kind: Portal
metadata:
  name: lambda-portal
  namespace: default
spec:
  displayName: Lambda Portal
  description: The Gloo Portal for the Lambda API
  banner:
    fetchUrl: https://i.imgur.com/EXbBN1a.jpg
  favicon:
    fetchUrl: https://i.imgur.com/QQwlQG3.png
  primaryLogo:
    fetchUrl: https://i.imgur.com/hjgPMNP.png
  customStyling: {}
  staticPages: []

  domains:
  # If you are using Gloo Edge and the Gateway is listening on a port other than 80, 
  # you need to include a domain in this format: <DOMAIN>:<INGRESS_PORT> as we do below
  - portal.petstore.ge-single.awscloud.solo.io

  # This will include all API product of the environment in the portal
  publishedEnvironments:
  - name: dev
    namespace: default
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: lambda-demo-api
  namespace: default
spec:
  endpoints:
    - dnsName: api.petstore.ge-single.awscloud.solo.io
      recordType: CNAME
      targets:
      - k8s-gloosyst-gatewayp-510fe2ccc8-027151f46d71bbd5.elb.us-east-2.amazonaws.com
---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: lambda-demo-portal
  namespace: default
spec:
  endpoints:
    - dnsName: portal.petstore.ge-single.awscloud.solo.io
      recordType: CNAME
      targets:
      - k8s-gloosyst-gatewayp-510fe2ccc8-027151f46d71bbd5.elb.us-east-2.amazonaws.com
---
# required in gloo settings crd
  # gloo:
  #   awsOptions:
  #     fallbackToFirstFunction: true
apiVersion: gloo.solo.io/v1
kind: Upstream
metadata:
  name: aws-lambda
  namespace: default
spec:
  aws:
    destinationOverrides: 
      requestTransformation: true
      # use unwrap instead of responseTransformation; unwrap will set status code and headers but responseTransformation will only set body
      unwrapAsApiGateway: true
    secretRef:
      name: aws-creds
      namespace: gloo-system
    lambdaFunctions:
    # for fallbackToFirstFunction only 1 function should exist in this list
    # and it must be the first one
    - lambdaFunctionName: golang-gloo-latest
      logicalName: golang-gloo-latest
    region: us-east-2
    roleArn: arn:aws:iam::931713665590:role/gloo-lambda-executor